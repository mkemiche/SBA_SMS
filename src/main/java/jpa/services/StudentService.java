package jpa.services;

import jpa.entitymodels.Course;
import jpa.entitymodels.Student;
import jpa.entitymodels.StudentCourses;
import jpa.exceptions.CourseAlreadyRegistredException;
import jpa.exceptions.StudentNotFoundException;
import jpa.exceptions.UserValidationFailedException;
import jpa.interfaces.FindAllRecords;
import jpa.interfaces.FindCourseBy;
import jpa.interfaces.FindStudentBy;
import jpa.interfaces.Register;
import jpa.utils.ConfigEM;
import lombok.extern.java.Log;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

import javax.persistence.EntityManager;
import javax.persistence.RollbackException;
import java.util.List;

/**
 * The type Student service.
 *
 * @author mkemiche
 * @created 05 /05/2021
 */
@Log
public class StudentService implements FindAllRecords<Student, String>, FindStudentBy<Student, String>, FindCourseBy<Course, String>, Register<Student, Course> {

    /**
     * The Em.
     */
    EntityManager em = null;

    /**
     *
     * @description This method takes two parameters: the first one is the user email and the second one is the password from the user input
     * @param email
     * @param password
     * @return Return whether or not student was found.
     * @throws StudentNotFoundException
     */
    private boolean validateStudent(String email, String password) throws StudentNotFoundException {
        /* find all student by email */
        List<Student> students = findStudentBy(email);
        if(students.isEmpty()){
            throw new StudentNotFoundException("Student does not exist with entered email : "+ email);
        }
        return students.get(0).getSPass().equals(password);
    }

    /**
     *
     * @description This method reads the student table in your database
     * @param @Nullable String
     * @return the data as a List<Student>
     */
    @Override
    public List<Student> getAllRecords(@Nullable String s) {
        List<Student> students = null;
        try{
            em = ConfigEM.createEntityManager();
            students = em.createQuery("select s from Student s").getResultList();
            em.getTransaction().commit();
        }catch (IllegalArgumentException | RollbackException ex){
            em.getTransaction().rollback();
            log.severe(String.format("Something happen on %s cause %s ",ex.getStackTrace()[0].getMethodName(), ex.getMessage()));
        }finally {
            em.close();
            ConfigEM.closeEMF();
        }
        return students;
    }

    /**
     *
     * @description This method takes a Student’s email as a String and parses the student list for a Student with that email
     * @param email
     * @return a Student Object.
     */
    @Override
    public List<Student> findStudentBy(String email) {
        List<Student> students = null;
        try{
            em = ConfigEM.createEntityManager();
            students = em.createNamedQuery("getStudentsByEmail").setParameter("email", email).getResultList();
            em.getTransaction().commit();
        }catch (IllegalArgumentException | RollbackException ex){
            em.getTransaction().rollback();
            log.severe(String.format("Something happen on %s cause %s ",ex.getStackTrace()[0].getMethodName(), ex.getMessage()));
        }finally {
            em.close();
            ConfigEM.closeEMF();
        }
        return students;
    }

    /**
     *
     * @description After a successful student validation, this method takes a Student’s email and a Course ID.
     *              It checks in the join table (i.e. Student_Course) generated by JPA to find if a Student with that Email is currently attending a Course with that ID.
     *              If the Student is not attending that Course, register the student to that course; otherwise not.
     * @param @NotNull student
     * @param course
     * @throws StudentNotFoundException
     * @throws UserValidationFailedException
     * @throws CourseAlreadyRegistredException
     */
    @Override
    public void register(@NotNull Student student, Course course) throws StudentNotFoundException, UserValidationFailedException, CourseAlreadyRegistredException {
        StudentCourses st = new StudentCourses();

        if(!validateStudent(student.getSEmail(), student.getSPass())){
            throw new UserValidationFailedException("User Validation failed.");
        }

        //find all course by student email
        List<Course> courses = findCourseBy(student.getSEmail());
        boolean check = courses.stream().anyMatch(c-> c.getCId() == course.getCId());
        if(check){
            System.out.println("You're already registred in this course.");
            throw new CourseAlreadyRegistredException("You're already registred in this course with id : "+course.getCId());
        }
        st.seteMail(student.getSEmail());
        st.setCourseID(course.getCId());
        registerCourse(st);
    }

    /**
     *
     * @description This method takes a Student’s Email as a parameter and would find all the courses a student is registered
     * @param email
     * @return the data as a List<Course>
     */
    @Override
    public List<Course> findCourseBy(String email) {

        List<Course> courses = null;
        try{
            em = ConfigEM.createEntityManager();
            courses = em.createNamedQuery("getStudentCoursesByEmail2").setParameter("email", email).getResultList();
            em.getTransaction().commit();
        }catch (IllegalArgumentException | RollbackException ex){
            em.getTransaction().rollback();
            log.severe(String.format("Something happen on %s cause %s ",ex.getStackTrace()[0].getMethodName(), ex.getMessage()));
        }finally {
            em.close();
            ConfigEM.closeEMF();
        }
        return courses;
    }

    /**
     *
     * @param studentCourses
     */
    private void registerCourse(StudentCourses studentCourses) {
        try {
            em = ConfigEM.createEntityManager();
            em.persist(studentCourses);
            em.getTransaction().commit();
        } catch (IllegalArgumentException | RollbackException ex) {
            em.getTransaction().rollback();
            log.severe(String.format("Something happen on %s cause %s ", ex.getStackTrace()[0].getMethodName(), ex.getMessage()));
        } finally {
            em.close();
            ConfigEM.closeEMF();
        }
    }
}
